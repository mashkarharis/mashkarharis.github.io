<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Devs Base Online</title>
    <link href="https://mashkarharis.github.io/feed.xml" rel="self" />
    <link href="https://mashkarharis.github.io" />
    <updated>2025-01-19T12:11:20+05:30</updated>
    <author>
        <name>M Ashkar Haris</name>
    </author>
    <id>https://mashkarharis.github.io</id>

    <entry>
        <title>Java 17 Basics - How Java Works</title>
        <author>
            <name>M Ashkar Haris</name>
        </author>
        <link href="https://mashkarharis.github.io/java-17.html"/>
        <id>https://mashkarharis.github.io/java-17.html</id>

        <updated>2025-01-19T11:20:39+05:30</updated>
            <summary>
                <![CDATA[
                    As the next step, let's try to understand how Java works in a given environment. Let's Identify difference between JVM,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>As the next step, let's try to understand how Java works in a given environment. Let's Identify difference between JVM, JRE and JDK First.</p>
<p>1. JVM (Java Virtual Machine) :  JVM is the environment that executes Java compiled code (a.k.a bytecode). It provides platform independence by converting the compiled bytecode into machine-specific instructions.</p>
<p>2. JRE (Java Runtime Environment) : JRE is a part of the Java platform that provides the necessary environment to run Java applications.  It is the environment for the JVM and includes the libraries and other components needed to execute programs.</p>
<p>3. JDK (Java Development Kit) : JDK is a complete software development kit used for developing Java applications. It includes tools like compilers, debuggers, and the JRE ( which also contains JVM).</p>
<p>Here is how all connects with each other.</p>
<p><img loading="lazy" src="file:///C:/Users/DELL/Downloads/Untitled%20Diagram.drawio.png" data-is-external-image="true"></p>
<p>Now let's look how java code get compiled and executed by the ecosystem.</p>
<p>First, user writes a java code in a human readable language (using java syntax) in a file, for example let's say the file name is <code>Hello.java</code>. As the next step, user will run the command <code>javac Hello.java</code> to compile the java code. This will instruct JDK to use javac compiler and convert this file user wrote into a byte-code file. The javac will output a file named <code>Hello.class</code> ( This is not human readable).</p>
<p>Then, This file can be distributed to any user who has a OS, which is supported by JRE. Once another user received this <code>Hello.class</code> file, new user can use command <code>java Hello</code> to execute the code.<br><br>Let's view this using a simple diagram.</p>
<p><img loading="lazy" src="file:///C:/Users/DELL/Downloads/Untitled%20Diagram2.drawio.png" data-is-external-image="true"></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java 17 Basic - Introduction</title>
        <author>
            <name>M Ashkar Haris</name>
        </author>
        <link href="https://mashkarharis.github.io/java-17-basic-introduction.html"/>
        <id>https://mashkarharis.github.io/java-17-basic-introduction.html</id>

        <updated>2025-01-19T11:18:37+05:30</updated>
            <summary>
                <![CDATA[
                    Java is an Object Oriented Language, which is initially developed by Sun Micro system in 1991. Java was officially released&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><span style="color: #000000;">Java is an Object Oriented Language, which is initially developed by Sun Micro system in 1991. Java was officially released with the slogan "Write Once, Run Anywhere" (WORA) highlighted its platform-independent nature. Oracle acquired Java when it purchased Sun Micro-Systems in 2010. The acquisition was finalised on January 27, 2010. </span></p>
<p><span style="color: #000000;">Java Released Major Releases with new features as follows.</span></p>
<p><span style="color: #000000;"><strong>1. Java 1.0 (1996)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Initial release.</span></li>
<li><span style="color: #000000;">Basic object-oriented features and the first Java API.</span></li>
<li><span style="color: #000000;">"Write Once, Run Anywhere" concept introduced.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>2. Java 1.1 (1997)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Event handling model revamped.</span></li>
<li><span style="color: #000000;">Introduction of inner classes and JDBC (Java Database Connectivity).</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>3. Java 2 (JDK 1.2) (1998)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Marked the start of Java 2 Platform.</span></li>
<li><span style="color: #000000;">Swing library introduced for GUI development.</span></li>
<li><span style="color: #000000;">Collections Framework introduced.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>4. J2SE 1.3 (2000)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">HotSpot JVM included.</span></li>
<li><span style="color: #000000;">JavaSound API and RMI (Remote Method Invocation) enhancements.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>5. J2SE 1.4 (2002)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Assertions introduced.</span></li>
<li><span style="color: #000000;">Regular expressions added.</span></li>
<li><span style="color: #000000;">NIO (New Input/Output) package introduced.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>6. Java 5 (2004)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Generics, Enhanced for-loop, Annotations, Varargs, and Autoboxing/Unboxing.</span></li>
<li>Introduction of the enum keyword.</li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>7. Java 6 (2006)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Focus on performance improvements.</span></li>
<li><span style="color: #000000;">Scripting language support with the javax.script package.</span></li>
<li><span style="color: #000000;">Enhanced Web Services API.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>8. Java 7 (2011)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Try-with-resources, Binary literals, Switch statement for Strings.</span></li>
<li><span style="color: #000000;">Fork/Join Framework for parallelism.</span></li>
<li><span style="color: #000000;">NIO.2 for advanced file I/O operations.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>9. Java 8 (2014)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Lambda expressions.</span></li>
<li><span style="color: #000000;">Stream API.</span></li>
<li><span style="color: #000000;">Date and Time API overhaul (java.time package).</span></li>
<li><span style="color: #000000;">Introduction of Default and Static methods in interfaces.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>10. Java 9 (2017)</strong></span></p>
<ul>
<li><span style="color: #000000;">JShell (interactive command-line tool).</span></li>
<li><span style="color: #000000;">HTTP/2 Client API.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>11. Java 10 (2018)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Local-variable type inference with var.</span></li>
<li><span style="color: #000000;">Garbage Collector enhancements.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>12. Java 11 (2018)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">var in lambda expressions.</span></li>
<li><span style="color: #000000;">New HttpClient API.</span></li>
<li><span style="color: #000000;">Removal of Java EE and CORBA modules.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>13. Java 12 (2019)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Switch Expressions (preview feature).</span></li>
<li><span style="color: #000000;">JVM enhancements for performance.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>14. Java 13 (2019)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Text Blocks (preview feature).</span></li>
<li><span style="color: #000000;">Improved garbage collection and runtime optimizations.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>15. Java 15 (2020)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Sealed classes (preview feature).</span></li>
<li><span style="color: #000000;">Hidden classes for frameworks.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>16. Java 16 (2021)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Records introduced for immutable data carriers.</span></li>
<li><span style="color: #000000;">jpackage tool for packaging Java applications.</span></li>
</ul>
<p> </p>
<p><span style="color: #000000;"><strong>17. Java 17 (2021)</strong></span></p>
<p> </p>
<ul>
<li><span style="color: #000000;">Long-Term Support (LTS) version.</span></li>
<li><span style="color: #000000;">Pattern matching for switch, Sealed classes, and enhanced Java language syntax.</span></li>
</ul>
<p>And so on . . .</p>
<p>Java releases a new version every 6 month. Long-Term Support (LTS) releases for Java are released every three years. LTS versions are supported for an extended period, making them ideal for production environments that prioritise stability.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Ternary Operation</title>
        <author>
            <name>M Ashkar Haris</name>
        </author>
        <link href="https://mashkarharis.github.io/ternary-operation.html"/>
        <id>https://mashkarharis.github.io/ternary-operation.html</id>
        <media:content url="https://mashkarharis.github.io/media/posts/1/ana-municio-PbzntH58GLQ-unsplash.jpg" medium="image" />
            <category term="Optimisation"/>

        <updated>2024-12-25T18:05:16+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://mashkarharis.github.io/media/posts/1/ana-municio-PbzntH58GLQ-unsplash.jpg" alt="" />
                    We are commonly using if, else, else if, and switch case operations to handle our conditional tasks. In this article,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://mashkarharis.github.io/media/posts/1/ana-municio-PbzntH58GLQ-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <p>We are commonly using if, else, else if, and switch case operations to handle our conditional tasks. In this article, we are going to discuss a quick and efficient operation known as Ternary Operation, used to handle conditional tasks in most programming languages.</p>
<h3 id="when-to-use-ternary-operators"><span class="me-2">When To Use Ternary Operators</span><a href="https://devsbase.online/posts/Ternary-Operation-1/#when-to-use-ternary-operators" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3>
<ul>
<li>Ideal for simple conditional statements.</li>
<li>Avoid using for complex conditions as it can reduce readability.</li>
</ul>
<h3 id="advantages-of-ternary-operators"><span class="me-2">Advantages of Ternary Operators</span><a href="https://devsbase.online/posts/Ternary-Operation-1/#advantages-of-ternary-operators" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3>
<ol>
<li><strong>Conciseness</strong>: Reduces the amount of code.</li>
<li><strong>Readability</strong>: Once familiar with structure, it can make the code easier to read.</li>
</ol>
<h3 id="structure"><span class="me-2">Structure</span><a href="https://devsbase.online/posts/Ternary-Operation-1/#structure" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3>
<p>As mentioned, We are commonly using if, else, else if, and switch case operations to handle our conditional tasks. Ternary operation is also one of the conditional operations introduced by many programming languages.</p>
<p>First of all, Let’s look at the structure of this operator in java.</p>
<table class="rouge-table">
<tbody>
<tr>
<td class="rouge-gutter gl">
<pre class="language-java"><code>variable var1 = (condition) ? (value If True) : (value If False)</code></pre>
</td>
</tr>
</tbody>
</table>
<p>This operator has three main parts. Those are,</p>
<p><code>Variable <br> Condition <br> Return Values </code></p>
<h3 id="example-usages"><span class="me-2">Example Usages</span><a href="https://devsbase.online/posts/Ternary-Operation-1/#example-usages" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3>
<p>When we run this operator, first it checks whether the given condition is true. If true, it stores Value If True in var1. If the given condition is false, it stores Value If False in var1. The java code below shows how this works.</p>
<pre class="language-java"><code>class Ternary{
    public static void main(String args[]) {
        int score;
        String result;
        score=75;
        result = (score&gt;=50) ? ("Passed") : ("Failed");
        System.out.println(result);
        score=30;
        result = (score&gt;=50) ? ("Passed") : ("Failed");
        System.out.println(result);
    }
}</code></pre>
<p>Output :</p>
<pre class="language-java"><code>Passed
Failed</code></pre>
<p>Now you have the question: “Why do we need this operation? We can use an “If” Statement instead of this”. Yes, you are correct, we can use an “if” condition instead of using ternary operation. But after reading the below example I’m sure that you will choose ternary over if.</p>
<p>Grading Students Mark Using If, else, else if Condition :</p>
<pre class="language-java"><code>class Ternary{
    public static void main(String args[]) {
        
        int score;
        String result;
        score=67;

        if(score&gt;=75){
            result = "A";
        }
        else if(score&gt;=65){
            result = "B";
        }
        else if(score&gt;=55){
            result = "C";
        }
        else if(score&gt;=40){
            result = "S";
        }
        else{
            result = "F";
        }
        
        System.out.println(result);
    }
}</code></pre>
<p>It took 26 code lines to define the logic !!!</p>
<p>Grading Students Mark Using Ternary Operation :</p>
<pre class="language-java"><code>class Ternary{
    public static void main(String args[]) {
        int score;
        String result;
        score=30;
        result = (score&gt;=75)? "A":
                 (score&gt;=65)? "B":
                 (score&gt;=55)? "C":
                 (score&gt;=40)? "S":
                 "W" ;
        System.out.println(result);
    }
}</code></pre>
<p>Now it took 13 code lines !!!</p>
<p>Now you can see that codes can be shrunk using ternary operation.</p>
<h3 id="conclusion"><span class="me-2">Conclusion</span><a href="https://devsbase.online/posts/Ternary-Operation-1/#conclusion" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3>
<p>As discussed The ternary operator is a valuable addition to a developer’s toolkit. It allows for cleaner and more efficient code, making it a preferred choice in many scenarios.</p>
<p>I hope that this article was helpful to you. Thank you for reading.</p>
            ]]>
        </content>
    </entry>
</feed>
